#Adam Karim
#https://web.archive.org/web/20170514093208/http://fsecurify.com/using-machine-learning-detect-malicious-urls/ was used to help me create this code. 
# The tutorial explains on how to create a machine learning algorithm on how to detect malicious url
#https://web.archive.org/web/20171206020715if_/https://github.com/faizann24/Using-machine-learning-to-detect-malicious-URLs/tree/master/data 
# this was used to provided the clean websites that imported into the MalwareData.csv

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
import pandas as pd
import numpy as np
import random
from sklearn.feature_extraction.text import TfidfVectorizer
import sys
import os
from sklearn.linear_model import LogisticRegression

import math
from collections import Counter

#Function getExtension is used to seperate the website from extensions such as .com/file.php 
def getExtension(input):
    extBySlash = str(input.encode('utf-8')).split('/')
    allExt = []
    for i in extBySlash:
        extensions = str(i).split('-')
        extByDot = []
        for j in range(0 , len(extensions)):
            tempExt = str(extensions[j]).split('.')
            extByDot = extByDot + tempExt
        allExt = allExt + extensions + extByDot
    allExt = list(set(allExt))
    if 'com' in allExt:
        allExt.remove('com')
    return allExt

#allurlsData store the data frame from MalwareData.csv
allurls = './MalwareData.csv'
allurlscsv = pd.read_csv(allurls,',', error_bad_lines=False)
allurlsData = pd.DataFrame(allurlscsv)

#print(allurlsData)
#this section of the code shuffles the array so all data is not organized to increase entropy
allurlsData = np.array(allurlsData)
random.shuffle(allurlsData)
#print(allurlsData)


#Vectorizer is used in machine learning such as numpy to optimize performance and is able to loop through program faster
y = [d[1] for d in allurlsData]	
corsL = [d[0] for d in allurlsData]	
vectorizer = TfidfVectorizer(tokenizer=getExtension)	
X = vectorizer.fit_transform(corsL) 
y = [d[1] for d in allurlsData]	
corsL = [d[0] for d in allurlsData]	
vectorizer = TfidfVectorizer(tokenizer=getExtension)	
X = vectorizer.fit_transform(corsL) 


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)	
#A logistic regression algorithm is used to help classify whether a url is malicious or not 
lgs = LogisticRegression()	
lgs.fit(X_train, y_train)
print(lgs.score(X_test, y_test)) 

#THIS BLOCK DETERMINES IF THE WEBSITE IS MALICIOUS OR NOT.
X_predict = ['https://youtube.com/' , 'https://facebook.com/' , 'http://100.35.47.56:18957/.i' , 'vnjt.top/files/penelop/updatewin2.exe' , 'https://www.youtube.com/']
X_predict = vectorizer.transform(X_predict)
y_Predict = lgs.predict(X_predict)
print(y_Predict) #printing predicted values
